# shredlog configuration
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# mode=auto | delete | shred | both
#
# Select which mode to use by default when using the `shredlog` command.
#
# The default is "delete" because it is the safest in most situations.
# The following describe each option:
#
# - auto
#
#   In "auto" mode, the shredlog tool attempts to determine the type of
#   device the file is on. If it is a rotational drive, then it tries to
#   shred the file before deleting it.
#
#   WARNING: At this time, VPS computers (i.e. local such as VirtualBox or
#            remote such as at your ISP location) are likely to return
#            "rotational" even when the drive used is an SSD.
#
# . delete (default)
#
#   Just delete the files. No shredding is to happen in any circumstances.
#
# . shred
#
#   Only shred files. In this case, there is no test to know whether the
#   file should be shredded or not. It just does it. The file does not get
#   deleted.
#
# . both
#
#   First shred the file and then remove it from the disk.
#
#   Keep in mind that if the file system has a journal and is small enough
#   to fit in the kernel file caches, it will not be shredded more than
#   once.
#
# Default: delete
mode=delete


# force
#
# Force the shredding, deletion, recursive deletions.
#
# When this flag is used, the deletion of a non-existant file is silently
# processed as "done".
#
# Default: (undefined)
#force


# iterations=<count>
#
# Defines the number of time the shreding is applied. We have a default
# count of 3 which overrides the default count of `shred` (which happens
# to also be 3).
#
# The number of iterations can be increased to really make sure that the
# data gets overwritten and the original would be really difficult to
# retrieved. From scientific papers, the original is still somewhat present
# whatever the number of writes, but it requires enormous machines to be
# able to read such low level marks... For sure, it would not be possible
# for someone to read your data in a data center just through their VPS
# system. Access to your old data will require physical access to the
# device. It's probably going to be easier to make you talk instead of
# rescuing the data.
#
# Note that the only way to make sure that the random data gets saved on
# disk between iteration is to use the sync mode which is very slow.
# Without that option, the file gets shredded multiple times in memory
# and whatever is no disk doesn't change at all until the last iteration.
# By default, the /usr/binshred tool uses `wipesync` which means it will
# be very slow but the writing will actually happen on each iteration.
#
# Default: 3
iterations=3


# random-source=<path>
#
# Change the path to the random source used by `shred`. This is a path
# to a file such as `/dev/random`.
#
# By default we let `/usr/bin/shred` use its default.
#
# Default: (unspecified)
#random-source=


# recursive
#
# Process the files recursively. If `shredlog` finds a directory, it
# reads all the files inside the directory and process them one at a
# time.
#
# Note that in this mode, directories are deleted using `rmdir ...`
# unless the `force` option is specified, in which case the `rm -rf ...`
# command is used.
#
# Either way, the directory does not get renamed first. So your directory
# names should not leak any important data.
#
# By default, the `shredlog` is not recursive. Specifying a directory will
# use the `rmdir ...` command and if the directory is not empty, the
# function fails removing it.
#
# Default: (unspecified)
#recursive


# remove=<unlink|wipe|wipesync>
#
# Specify how the unlink() is done in `shred`. This mode is only used
# when `shred` gets used. The `shredlog` tool itself currently ignores
# that flag since in most cases it is not useful on an SSD drive.
#
# * unlink -- just use rmdir()
# * wipe -- rename the directory, truncate the file, then do an rmdir()
# * wipesync -- rename the directory, truncate the file, then do an rmdir()
# all using sync (i.e. direct I/O commands)
#
# Default: wipesync
#remove=wipesync


# size=<count>
#
# Specify the amount of data to shred in the file.
#
# If you want to only shred data, this option can be used to specify how
# many bytes, kilo bytes (K), mega bytes (M), or giga bytes (G) will be
# shred. If the file is smaller, then the shredding is limited to the
# existing file size.
#
# When not specified the size defaults to the  size of the file being
# shredded.
#
# This option is ignored on a `delete`-only call.
#
# Default: (unspecified)
#size=


# verbose
#
# Define whether the work being perform should be detailed on the screen
# or not. By default the tool is quiet.
#
# Default: (undefined)
#verbose


# exact
#
# Whether the shredding happen on the exact size of the file, whatever
# that size might be, or on the block boundary.
#
# When working on a file, you may truncate that file. That means data
# on the last block is going to remain on the disk. By default `shred`
# takes care of that data automatically. Using the `exact` command line
# option means that the extra data gets ignored. This is a good option
# if you are dealing with files that only grow, like logs.
#
# Default: (undefined)
#exact


# zero
#
# Clear the file at the end of the shredding process.
#
# The `shred` tool writes random data (see `random-source`) to your file
# before deleting it. By default, that random data is the last thing that
# is left on disk.
#
# The `zero` option asks `shred` to come back and write zeroes over the
# last shred random data. This means it would be close to impossible for
# a later tool to determine which random source you used (assuming the
# randomness was not that good.)
#
# Default: (undefined)
#zero


# log_config_path=<path to log configuration files>
#
# This variable defines the path to the logger configuration files.
# The shredlog tool reads these configuration files to setup the logs.
# It may also print errors in the console.
#
# Default: /etc/snaplogger
#log_config_path=/etc/snaplogger


# vim: wrap
