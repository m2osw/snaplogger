# shredlog configuration
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# log_config_path=<path to log configuration files>
#
# This variable defines the path to the logger configuration files.
# The shredlog tool reads these configuration files to setup the logs.
# It may also print errors in the console.
#
# Default: /etc/snaplogger
#log_config_path=/etc/snaplogger


# auto
#
# If defined, use `shredlog` in "auto mode".
#
# In this mode, `shredlog` attempts to detect the type of drive where the
# file resides. If the drive is viewed as a rotational, then apply `shred`.
# If the drive is viewed as an SSD (no moving parts), then apply `rm` instead.
#
# This is the default if no other mode is selected.
#
# Default: (undefined)
#auto


# delete
#
# Force a _delete_ of the file. In this mode the tool always uses the
# `rm ...` command. This is useful if you know that the storage device you
# are using is an SSD and the `shredlog` doesn't properly detect it.
# (i.e. the detection always fails if you are using a VPS).
#
# Note: if you want to also delete non-empty directory, make sure to include
# the `recursive` flag as well.
#
# Default: (defined)
delete


# shred
#
# This flag force shredding to happen, no matter what. This is similar to
# the `delete` command above, only it forces `shred ...` to run instead of
# `rm ...`.
#
# Since the default is to shred if we do not see the drive as an SSD, this
# flag is likely not necessary. Use `auto` instead.
#
# Note: shredding on an SSD is **not** working. It will instead write
# data at new location on each write which means that overall it will
# age your drive prematurely if anything.
#
# Default: (undefined)
#shred


# unlink
#
# This flag asks the shredder to also _unlink_ (delete/remove) the file
# once done. This includes renaming the file.
#
# Note that the `delete` flag implies an `unlink`, it can be used along
# that option, though. The `unlink` is necessary if you use the `shred`
# option and want to also delete the files at the end.
#
# Default: (undefined)
unlink


# force
#
# Force the shredding, deletion, recursive deletions.
#
# When this flag is used, the deletion of a non-existant file is silently
# processed as "done".
#
# Default: (undefined)
#force


# iterations=<count>
#
# Defines the number of time the shreding is applied. We have a default
# count of 3 which overrides the default count of `shred` (which happens
# to also be 3).
#
# The number of iterations can be increased to really make sure that the
# data gets overwritten and the original would be really difficult to
# retrieved. From scientific papers, the original is still somewhat present
# whatever the number of writes, but it requires enormous machines to be
# able to read such low level marks... For sure, it would not be possible
# for someone to read your data in a data center just through their VPS
# system. Access to your old data will require physical access to the
# device. It's probably going to be easier to make you talk instead of
# rescuing the data.
#
# Default: 3
iterations=3


# random-source=<path>
#
# Change the path to the random source used by `shred`. This is a path
# to a file such as `/dev/random`.
#
# By default we let `shred` use its default.
#
# Default: (unspecified)
#random-source=


# recursive
#
# Process the files recursively. If `shredlog` finds a directory, it
# reads all the files inside the directory and process them one at a
# time.
#
# Note that in this mode, directories are deleted using `rmdir ...`
# unless the `force` option is specified, in which case the `rm -rf ...`
# command is used.
#
# Either way, the directory does not get renamed first. So your directory
# names should not leak any important data.
#
# By default, the `shredlog` is not recursive. Specifying a directory will
# use the `rmdir ...` command and if the directory is not empty, the
# function fails removing it.
#
# Default: (unspecified)
#recursive


# remove=<unlink|wipe|wipesync>
#
# Specify how the unlink() is done in `shred`. This mode is only used
# when `shred` gets used. The `shredlog` tool itself currently ignores
# that flag since in most cases it is not useful on an SSD drive.
#
# * unlink -- just use rmdir()
# * wipe -- rename the directory, truncate the file, then do an rmdir()
# * wipesync -- rename the directory, truncate the file, then do an rmdir()
# all using sync (i.e. direct I/O commands)
#
# Default: wipesync
#remove=wipesync


# size=<count>
#
# Specify the amount of data to shred in the file.
#
# If you want to only shred data, this option can be used to specify how
# many bytes, kilo bytes (K), mega bytes (M), or giga bytes (G) will be
# shred. If the file is smaller, then the shredding is limited to the
# existing file size.
#
# When not specified the size defaults to the  size of the file being
# shredded.
#
# This option is ignored on a `delete`-only call.
#
# Default: (unspecified)
#size=


# verbose
#
# Define whether the work being perform should be detailed on the screen
# or not. By default the tool is quiet.
#
# Default: (undefined)
#verbose


# exact
#
# Whether the shredding happen on the exact size of the file, whatever
# that size might be, or on the block boundary.
#
# When working on a file, you may truncate that file. That means data
# on the last block is going to remain on the disk. By default `shred`
# takes care of that data automatically. Using the `exact` command line
# option means that the extra data gets ignored. This is a good option
# if you are dealing with files that only grow, like logs.
#
# Default: (undefined)
#exact


# zero
#
# Clear the file at the end of the shredding process.
#
# The `shred` tool writes random data (see `random-source`) to your file
# before deleting it. By default, that random data is the last thing that
# is left on disk.
#
# The `zero` option asks `shred` to come back and write zeroes over the
# last shred random data. This means it would be close to impossible for
# a later tool to determine which random source you used (assuming the
# randomness was not that good.)
#
# Default: (undefined)
#zero


# vim: wrap
