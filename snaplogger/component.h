/*
 * Copyright (c) 2013-2021  Made to Order Software Corp.  All Rights Reserved
 *
 * https://snapwebsites.org/project/snaplogger
 * contact@m2osw.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
#pragma once

/** \file
 * \brief Define the component class used as a way to group messages.
 *
 * Whenever you send a log, you can assign one or more components to it.
 *
 * By default, when a log component's list is empty, it is viewed as if
 * the list was only composed of the "normal" component.
 *
 * Errors generated by the snaplogger library include the "normal" and
 * "self" components.
 *
 * The library also offers a "debug" and "secure" set of components.
 *
 * To use these components and your own, use the section() function like so:
 *
 * \code
 *     SNAP_LOG_SEND
 *         << snaplogger::section(g_normal_component)
 *         << snaplogger::section(g_self_component)
 *         << "Message..."
 *         << SNAP_LOG_SEND;
 * \endcode
 *
 * For the "secure" component, you can also use the special ending macro
 * like so:
 *
 * \code
 *     SNAP_LOG_SEND
 *         << snaplogger::section(g_debug_component)
 *         << "Message..."
 *         << SNAP_LOG_SEND_SECURELY;
 * \endcode
 *
 * You cannot include "normal" and "secure" to the same message (they are
 * mutually exclusive). Trying to do so will generate an exception.
 *
 * \warning
 * Do NOT create a component directly. The only real interface accessible
 * to create a component as far as you're concerned are the get_component()
 * functions. One includes a message which means we have a direct access
 * to the private logger object.
 */


// C++ lib
//
#include    <map>
#include    <memory>
#include    <set>
#include    <string>



namespace snaplogger
{


class message;
class private_logger;


class component
{
public:
    typedef std::shared_ptr<component>          pointer_t;
    typedef std::map<std::string, pointer_t>    map_t;
    typedef std::set<pointer_t>                 set_t;

    std::string const &         get_name() const;

    void                        add_mutually_exclusive_components(set_t components);
    bool                        is_mutually_exclusive(pointer_t other_component) const;
    bool                        is_mutually_exclusive(set_t const & other_component) const;

private:
    friend private_logger;

                                component(std::string const & name);

    std::string const           f_name;
    set_t                       f_mutually_exclusive_components = {};
};



component::pointer_t            get_component(std::string const & name);
component::pointer_t            get_component(std::string const & name, component::set_t mutually_exclusive);
component::pointer_t            get_component(message const & msg, std::string const & name);


constexpr char const            COMPONENT_CPPTHREAD[] = "cppthread";
constexpr char const            COMPONENT_DEBUG[]     = "debug";
constexpr char const            COMPONENT_NORMAL[]    = "normal";
constexpr char const            COMPONENT_SECURE[]    = "secure";
constexpr char const            COMPONENT_SELF[]      = "self"; // for the snaplogger only

extern component::pointer_t     g_cppthread_component;
extern component::pointer_t     g_debug_component;
extern component::pointer_t     g_normal_component;
extern component::pointer_t     g_secure_component;
extern component::pointer_t     g_self_component;


struct section_ptr
{
    component::pointer_t    f_component;
};

inline section_ptr section(component::pointer_t comp)
{
    return { comp };
}





} // snaplogger namespace
// vim: ts=4 sw=4 et
