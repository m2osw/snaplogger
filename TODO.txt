
* Review the `field` extension

** Type

Right now we allow for fields of type string (which value is a string).

The fields should be given a type and be integers, floating points as
well as strings (maybe some other types too? like a date?)

** All Values are Fields

All the values added to a message can be viewed as being a field. For
example, the text message format could be referenced as the "message"
and the time when the message was created as the "timestamp". I'm
thinking to add the ability to read _system_ fields by name without
having to add them to the fields.

This complicates the ${fields} variable, though. Are we supposed to also
output all the system fields in this case?



* Allow a form of subcription to the logs

This should be a pubsub type of a thing. However, the logger is below the
eventdispatcher so it has no network abilities at all (to avoid code
duplication--see the snaplogger network extension in eventdispatcher).

However, since we can implement any type of appender, we can have one which
is a simple callback or have a pubsub appender in the logserver project
which will be used to send all the logs here and there. It may be smart
to implement that feature only in the `server daemon` since that one is
remote and thus you do not eat on local resources (i.e. you can then have
log dedicated machines which allow for subscriptions.)

The subscription can then be used by a tool which would replace fail2ban.
(i.e. a form of extension to the snapwatchdog service)

For `syslog` messages, we can use (I think) the
[`librelp`](https://www.rsyslog.com/librelp-1-1-0/) and setup the
system to forward messages to our service.

Then the syslog.d/... setup looks like this:

    *.* @remote-host:3333

The port number and "remote-host" have to be chosen so things actually work.
The default UDP port is 514, there is no relp default port in rsyslog. In
our /etc/services we have the following:

    syslog          514/udp
    syslog-tls      6514/tcp




