
* Review the `field` extension

** Type

Right now we allow for fields of type string (which value is a string).

The fields should be given a type and be integers, floating points as
well as strings (maybe some other types too? like a date & bool?)

** ${fields}

The library allows for system fields such as "_timestamp". But these are
totally missed by the ${fields} at the moment.

** Dynamic Fields

Whenever a message gets created, we could call a user defined callback
to generate fields dynamically. For example, you could have a flag that
you want to report just at the time the log message is created. You could,
of course, add something such as `... << (flag ? "true" : "false") ...`
to your `SNAP_LOG_ERROR << ...` statement. But if that flag is general
enough, it may be much more practical to handle it through a callback.



* Actually implement the snaploggerchecker tool.


* Severities have the mark_as_registered() function and the constructor
  which I think should be private and only the logger_private object
  would be able to access them. This way it would be much safer. But I
  have to determine whether this is how the severities are expected to
  be limited.


* Look at RFC5424 to see whether we could also support sending logs to
  syslog directly (and support many more features than just a level and
  a message) -- this may be something for the snaplogger/network
  found in eventdispatcher since it requires UDP and such.


* Allow a form of subcription to the logs

This should be a pubsub type of a thing. However, the logger is below the
eventdispatcher so it has no network abilities at all (to avoid code
duplication--see the snaplogger network extension in eventdispatcher).

However, since we can implement any type of appender, we can have one which
is a simple callback or have a pubsub appender in the logserver project
which will be used to send all the logs here and there. It may be smart
to implement that feature only in the `server daemon` since that one is
remote and thus you do not eat on local resources (i.e. you can then have
log dedicated machines which allow for subscriptions.)

The subscription can then be used by a tool which would replace fail2ban.
(i.e. a form of extension to the snapwatchdog service)

For `syslog` messages, we can use (I think) the
[`librelp`](https://www.rsyslog.com/librelp-1-1-0/) and setup the
system to forward messages to our service.

Then the syslog.d/... setup looks like this:

    *.* @remote-host:3333

The port number and "remote-host" have to be chosen so things actually work.
The default UDP port is 514, there is no relp default port in rsyslog. In
our /etc/services we have the following:

    syslog          514/udp
    syslog-tls      6514/tcp




